#!/usr/bin/env php
<?php
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once('../lib/avro.php');
$writers_schema_json = <<<_JSON
{
  "namespace" : "com.jcdecaux.datagov.posting.allocation.v1",
  "name" : "AllocationSnapshot",
  "doc" : "This Avro schema was generated automatically from model 'Posting / allocation' v0.1. Tools:BETA4",
  "x:modelName" : "Posting / allocation",
  "x:modelVersion" : "0.1",
  "x:toolsVersion" : "BETA4",
  "x:modelDoc" : "",
  "type" : "record",
  "fields" : [ {
    "name" : "header",
    "type" : {
      "type" : "record",
      "name" : "com.jcdecaux.smartlink.Header",
      "doc" : "A header that is present in all messages sent through SmartLink. All software dealing with SmartLink messages should be able to retrieve this header for auditing, debugging, tracking purposes.",
      "fields" : [ {
        "name" : "version",
        "type" : "int",
        "default" : 2,
        "doc" : "Version of header. Increases monotonically. This version is 2."
      }, {
        "name" : "makerId",
        "type" : "string",
        "doc" : "A 'keyword' that names the application that created this message."
      }, {
        "name" : "envId",
        "type" : [ "null", "int" ],
        "default" : null,
        "doc" : "Optional environment_id identifying the producer system. Added in version 2 of the header."
      }, {
        "name" : "id",
        "type" : "string",
        "doc" : "a string uniquely identifying this message ; e.g. as generated by java.util.UUID, java.rmi.server.UID, or the like."
      }, {
        "name" : "creationTime",
        "type" : "string",
        "doc" : "date and time when the message was created, formatted according to ISO-8601 ; e.g. 1969-07-02T02:00:00"
      }, {
        "name" : "makerInformation",
        "type" : [ "null", {
          "type" : "map",
          "values" : "string"
        } ],
        "default" : null,
        "doc" : "optional field - a map of additional information added by maker application"
      } ]
    }
  }, {
    "name" : "body",
    "type" : {
      "type" : "record",
      "name" : "AllocationSnapshotBody",
      "fields" : [ {
        "name" : "isdeletion",
        "type" : "boolean"
      }, {
        "name" : "allocation",
        "type" : {
          "type" : "record",
          "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.Allocation",
          "fields" : [ {
            "name" : "postingfolder",
            "type" : {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.PostingFolder",
              "fields" : [ {
                "name" : "postingstartdate",
                "doc" : "Logical type=date, encoded as in ISO8601, w/o timezone. e.g. 2016-08-31",
                "type" : "string"
              }, {
                "name" : "postingenddate",
                "doc" : "Logical type=date, encoded as in ISO8601, w/o timezone. e.g. 2016-08-31",
                "type" : "string"
              }, {
                "name" : "postingnotes",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            }
          }, {
            "name" : "allocationstartdate",
            "doc" : "Logical type=date, encoded as in ISO8601, w/o timezone. e.g. 2016-08-31",
            "type" : "string"
          }, {
            "name" : "takedowndate",
            "doc" : "Logical type=date, encoded as in ISO8601, w/o timezone. e.g. 2016-08-31",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "creative",
            "type" : {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.Creative",
              "fields" : [ {
                "name" : "code",
                "type" : "string"
              }, {
                "name" : "namehint",
                "type" : "string"
              } ]
            }
          }, {
            "name" : "poster",
            "type" : [ "null", {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.Poster",
              "fields" : [ {
                "name" : "code",
                "type" : "string"
              }, {
                "name" : "namehint",
                "type" : "string"
              } ]
            } ],
            "default" : null
          }, {
            "name" : "frame",
            "type" : {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.Frame",
              "fields" : [ {
                "name" : "code",
                "type" : "string"
              }, {
                "name" : "namehint",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            }
          }, {
            "name" : "postingnotes",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "newposting",
            "type" : "boolean"
          }, {
            "name" : "soldposting",
            "type" : "boolean"
          }, {
            "name" : "booking",
            "type" : [ "null", {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.Booking",
              "fields" : [ {
                "name" : "code",
                "type" : "string"
              }, {
                "name" : "namehint",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "postingnotes",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            } ],
            "default" : null
          }, {
            "name" : "advertiser",
            "type" : {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.misc.Advertiser",
              "fields" : [ {
                "name" : "code",
                "type" : "string"
              }, {
                "name" : "namehint",
                "type" : "string"
              }, {
                "name" : "brand",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "com.jcdecaux.datagov.posting.allocation.v1.misc.advertiser.Brand",
                  "fields" : [ {
                    "name" : "code",
                    "type" : "string"
                  }, {
                    "name" : "namehint",
                    "type" : "string"
                  } ]
                } ],
                "default" : null
              }, {
                "name" : "activitysector",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "com.jcdecaux.datagov.posting.allocation.v1.misc.advertiser.ActivitySector",
                  "fields" : [ {
                    "name" : "code",
                    "type" : "string"
                  }, {
                    "name" : "namehint",
                    "type" : "string"
                  } ]
                } ],
                "default" : null
              } ]
            }
          }, {
            "name" : "auditblock",
            "type" : {
              "type" : "record",
              "name" : "com.jcdecaux.datagov.posting.allocation.v1.misc.AuditBlock",
              "fields" : [ {
                "name" : "createdby",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "createdat",
                "doc" : "Logical type=dateTime, encoded as in ISO8601 extended format. e.g. 2016-08-31T23:15:58",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "modifiedby",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "updatedat",
                "doc" : "Logical type=dateTime, encoded as in ISO8601 extended format. e.g. 2016-08-31T23:15:58",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "deletedby",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "deletedat",
                "doc" : "Logical type=dateTime, encoded as in ISO8601 extended format. e.g. 2016-08-31T23:15:58",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            }
          } ]
        }
      } ]
    }
  } ]
}
_JSON;

$jose = array (
  'header' => 
  array (
    'version' => 991395322,
    'makerId' => 'V9<6rH*&',
    'envId' => 
    array (
      'int' => -1705810650,
    ),
    'id' => 'spKaq,7kV"cm=',
    'creationTime' => 'tAr|S7d',
    'makerInformation' => NULL,
  ),
  'body' => 
  array (
    'isdeletion' => true,
    'allocation' => 
    array (
      'postingfolder' => 
      array (
        'postingstartdate' => 'AQ9K4HN!|h-',
        'postingenddate' => 'DORwX.o?lRv',
        'postingnotes' => 
        array (
          'string' => 'A;c"',
        ),
      ),
      'allocationstartdate' => 'GokezT%Cp%',
      'takedowndate' => 
      array (
        'string' => 'T@`tR0XW',
      ),
      'creative' => 
      array (
        'code' => 'W)Rl?',
        'namehint' => '=Z)@', 
      array (
        'com.jcdecaux.datagov.posting.allocation.v1.resources.allocation.Poster' => 
        array (
          'code' => 'NhD1^am)0\\5r',
          'namehint' => '.4TiNXT',
        ),
      ),
      'frame' => 
      array (
        'code' => 'LR,{d1jP|OE',
        'namehint' => NULL,
      ),
      'postingnotes' => 
      array (
        'string' => 'w]@E:$d[',
      ),
      'newposting' => true,
      'soldposting' => false,
      'booking' => NULL,
      'advertiser' => 
      array (
        'code' => '8_s)8fB7|W',
        'namehint' => '/A2sCM\\c',
        'brand' => 
        array (
          'com.jcdecaux.datagov.posting.allocation.v1.misc.advertiser.Brand' => 
          array (
            'code' => 'tO8_\!2}A"',
            'namehint' => 'znjN,Rk',
          ),
        ),
        'activitysector' => NULL,
      ),
      'auditblock' => 
      array (
        'createdby' => NULL,
        'createdat' => NULL,
        'modifiedby' => NULL,
        'updatedat' => 
        array (
          'string' => 'F,n*4eKPsg',
        ),
        'deletedby' => NULL,
        'deletedat' => 
        array (
          'string' => 'Ds#3P(.yD[&6u7',
        ),
      ),
    ),
  ),
)
    );
$data = array($jose);
// Create a data string
// Create a string io object.
$io = new AvroStringIO();
// Create a datum writer object
$writers_schema = AvroSchema::parse($writers_schema_json);
var_dump($writers_schema); die();
$writer = new AvroIODatumWriter($writers_schema);
$data_writer = new AvroDataIOWriter($io, $writer, $writers_schema);
   
foreach ($data as $datum)
   $data_writer->append($datum);

$data_writer->close();

$binary_string = $io->string();
var_dump($binary_string);die();
$rk = new RdKafka\Producer();
$rk->setLogLevel(LOG_DEBUG);
$rk->addBrokers("127.0.0.1");

$topic = $rk->newTopic("test_avro");

$i=0;
while(true){
    sleep(1);
    $topic->produce(RD_KAFKA_PARTITION_UA, 0, $binary_string);
    $i++;
}
